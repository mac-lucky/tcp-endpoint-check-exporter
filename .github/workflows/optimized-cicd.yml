name: Optimized CI/CD - TCP Endpoint Check Exporter

on:
  push:
    branches: ["master"]
    paths-ignore:
      - ".github/workflows/**"
      - "*.md"
      - "LICENSE"
      - ".gitignore"
  pull_request:
    branches: ["master"]
    paths-ignore:
      - ".github/workflows/**"
      - "*.md"
      - "LICENSE"
      - ".gitignore"
  release:
    types: [published]

env:
  REGISTRY_IMAGE_DOCKERHUB: maclucky/tcp-endpoint-check-exporter
  REGISTRY_IMAGE_GHCR: ghcr.io/mac-lucky/tcp-endpoint-check-exporter

jobs:
  # Job 0: Extract Go version from go.mod
  setup:
    name: Setup Build Environment
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.version }}
      go-version-matrix: ${{ steps.go-version.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version from go.mod
        id: go-version
        run: |
          # Extract Go version from go.mod
          GO_VERSION=$(grep "^go " go.mod | cut -d' ' -f2)
          echo "Found Go version in go.mod: $GO_VERSION"

          # Set primary version for builds
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT

          # Create matrix for testing (current version + previous)
          # Extract major.minor and create previous version for testing
          MAJOR_MINOR=$(echo $GO_VERSION | cut -d'.' -f1,2)
          PREV_VERSION="$MAJOR_MINOR"

          # For Go 1.23, test with 1.22 as well
          if [[ $MAJOR_MINOR == "1.23" ]]; then
            PREV_VERSION="1.22"
          elif [[ $MAJOR_MINOR == "1.22" ]]; then
            PREV_VERSION="1.21"
          fi

          # Create JSON array for matrix
          MATRIX="[\"$PREV_VERSION\", \"$GO_VERSION\"]"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Testing with Go versions: $MATRIX"

  # Job 1: Code Quality & Security Analysis
  code-analysis:
    name: Code Analysis & Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2024.1.1"

      - name: Run gosec security scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: "./..."

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Job 2: Comprehensive Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [setup, code-analysis]
    strategy:
      matrix:
        go-version: ${{ fromJson(needs.setup.outputs.go-version-matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests

  # Job 3: Container Integration Tests
  container-test:
    name: Container Integration Test
    runs-on: ubuntu-latest
    needs: [setup, code-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: tcp-endpoint-check-exporter:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ needs.setup.outputs.go-version }}

      - name: Create test config
        run: |
          mkdir -p test-config
          cat > test-config/config.yml <<EOF
          targets:
            - host: "google.com"
              port: 443
              alias: "google"
            - host: "github.com" 
              port: 443
              alias: "github"
            - host: "httpbin.org"
              port: 80
              alias: "httpbin"
          EOF

      - name: Run container tests
        run: |
          docker run -d \
            -p 2112:2112 \
            -v $(pwd)/test-config:/config \
            -e CHECK_INTERVAL_SECONDS=10 \
            --name test-container \
            tcp-endpoint-check-exporter:test

          sleep 15

          # Test metrics endpoint
          response=$(curl -s http://localhost:2112/metrics)
          if echo "$response" | grep -q "tcp_endpoint_up"; then
            echo "✅ Metrics endpoint working"
          else
            echo "❌ Metrics endpoint not working"
            docker logs test-container
            exit 1
          fi

      - name: Container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "tcp-endpoint-check-exporter:test"
          format: "sarif"
          output: "container-trivy-results.sarif"

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "container-trivy-results.sarif"

  # Job 4: Build and Push Multi-arch Container Images
  build-and-push:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [setup, test, container-test]
    if: github.event_name == 'push' || github.event_name == 'release'
    environment: maclucky
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest version tag
        id: get_latest_version
        run: |
          LATEST_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ env.REGISTRY_IMAGE_DOCKERHUB }}/tags?page_size=100" | \
            jq -r '.results[].name' | \
            grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | \
            sort -V | tail -n 1 || echo "")
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Set version
        id: set_version
        run: |
          VERSION=${{ env.LATEST_TAG }}
          if [ -z "$VERSION" ]; then
            NEW_VERSION="1.0.0"
          else
            NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF++;print}')
          fi
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE_DOCKERHUB }}:${{ env.NEW_VERSION }}
            ${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest
            ${{ env.REGISTRY_IMAGE_GHCR }}:${{ env.NEW_VERSION }}
            ${{ env.REGISTRY_IMAGE_GHCR }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ needs.setup.outputs.go-version }}
            VERSION=${{ env.NEW_VERSION }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY_IMAGE_GHCR }}:${{ env.NEW_VERSION }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Job 5: Post-deployment verification
  post-deploy-verify:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Verify image pull and functionality
        run: |
          echo "Verifying images can be pulled..."
          docker pull ${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest
          docker pull ${{ env.REGISTRY_IMAGE_GHCR }}:latest

          echo "Testing basic functionality..."
          docker run --rm -d \
            -p 2113:2112 \
            --name verify-container \
            ${{ env.REGISTRY_IMAGE_DOCKERHUB }}:latest

          sleep 10

          # Test that the service responds
          if curl -f http://localhost:2113/metrics; then
            echo "✅ Service verification successful"
          else
            echo "❌ Service verification failed"
            docker logs verify-container
            exit 1
          fi

          docker stop verify-container
