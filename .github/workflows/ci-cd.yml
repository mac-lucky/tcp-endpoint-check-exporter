---
name: CI/CD Pipeline - TCP Endpoint Check Exporter

on:
  push:
    branches: ["master"]
    paths-ignore:
      - "*.md"
      - "LICENSE"
      - ".gitignore"
  pull_request:
    branches: ["master"]
    paths-ignore:
      - "*.md"
      - "LICENSE"
      - ".gitignore"
  release:
    types: [published]
  workflow_dispatch:

jobs:
  ci-cd:
    name: CI/CD Pipeline
    uses: mac-lucky/actions-shared-workflows/.github/workflows/go-cicd-reusable.yml@master
    permissions:
      contents: read
      packages: write
      security-events: write
    with:
      # Required parameters
      app_name: "tcp-endpoint-check-exporter"
      dockerhub_image: "maclucky/tcp-endpoint-check-exporter"
      ghcr_image: "ghcr.io/mac-lucky/tcp-endpoint-check-exporter"
      
      # Build configuration
      dockerfile_path: "./Dockerfile"
      build_context: "."
      
      # Test configuration
      enable_container_tests: false
      enable_kubernetes_tests: false
      
      # Security and quality
      enable_security_scan: true
      enable_sbom: true
      
      # Deployment
      enable_auto_version: true
      push_on_main: true
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

  # Custom container integration tests specific to tcp-endpoint-check-exporter
  tcp-endpoint-check-exporter-test:
    name: CI/CD Pipeline / Container Integration Test
    runs-on: ubuntu-latest
    needs: ci-cd
    if: ${{ needs.ci-cd.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download container artifact
        uses: actions/download-artifact@v5
        with:
          name: container-image
          path: /tmp

      - name: Load container image
        run: |
          gunzip -c /tmp/tcp-endpoint-check-exporter.tar.gz | docker load
          docker image ls -a

      - name: Create test config
        run: |
          mkdir -p test-config
          cat > test-config/config.yml <<EOF
          targets:
            - host: "google.com"
              port: 443
              alias: "google"
            - host: "github.com"
              port: 443
              alias: "github"
            - host: "httpbin.org"
              port: 80
              alias: "httpbin"
          EOF

      - name: Run container tests
        run: |
          docker run -d \
            -p 2112:2112 \
            -v $(pwd)/test-config:/config \
            -e CHECK_INTERVAL_SECONDS=10 \
            --name test-container \
            tcp-endpoint-check-exporter:test

          sleep 15

          # Test metrics endpoint
          response=$(curl -s http://localhost:2112/metrics)
          if echo "$response" | grep -q "tcp_endpoint_up"; then
            echo "✅ Metrics endpoint working"
            echo "Sample metrics:"
            echo "$response" | head -20
          else
            echo "❌ Metrics endpoint not working"
            docker logs test-container
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          docker stop test-container || true
          docker rm test-container || true